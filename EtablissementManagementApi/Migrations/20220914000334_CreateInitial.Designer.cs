// <auto-generated />
using System;
using EtablissementManagementApi.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EtablissementManagementApi.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220914000334_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EtablissementModels.Adresse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("EtablissementModels.AlbumPhotos", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("AlbumPhotos");
                });

            modelBuilder.Entity("EtablissementModels.Articles", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("EtablissementModels.CapaciteDeProduction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChiffreAffaireAnnuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractProduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbLigneDeProduction")
                        .HasColumnType("int");

                    b.Property<string>("PaysRegionExploitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TailleExploitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CapaciteDeProductions");
                });

            modelBuilder.Entity("EtablissementModels.CategoriesProduitsPrincipaux", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("CategoriesProduitsPrincipaux");
                });

            modelBuilder.Entity("EtablissementModels.CompetenceCommerciale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangueParlees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QteEmployeDuDepartementVente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RevenueTotalAnnuel")
                        .HasColumnType("real");

                    b.Property<int>("TempsMoyenReponse")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CompetenceCommerciales");
                });

            modelBuilder.Entity("EtablissementModels.Etablissement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdresseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumPhotosID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticlesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CapaciteDeProductionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PresentationEquipeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PresentationEtablissementID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PresentationProductionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfilCommercialID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteAdresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdresseID");

                    b.HasIndex("AlbumPhotosID");

                    b.HasIndex("ArticlesID");

                    b.HasIndex("CapaciteDeProductionID");

                    b.HasIndex("PresentationEquipeID");

                    b.HasIndex("PresentationEtablissementID");

                    b.HasIndex("PresentationProductionID");

                    b.HasIndex("ProfilCommercialID");

                    b.ToTable("Etablissements");
                });

            modelBuilder.Entity("EtablissementModels.PresentationEquipe", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("PresentationEquipes");
                });

            modelBuilder.Entity("EtablissementModels.PresentationEtablissement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesProduitsPrincipauxID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationDesProduits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDEtablissement")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEmployes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaysRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipauxMarches")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalRevenuAnnuel")
                        .HasColumnType("real");

                    b.Property<string>("TypeEtablissement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoriesProduitsPrincipauxID");

                    b.ToTable("PresentationEtablissement");
                });

            modelBuilder.Entity("EtablissementModels.PresentationProduction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("PresentationProduction");
                });

            modelBuilder.Entity("EtablissementModels.ProfilCommercial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetenceCommercialeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermsAffairesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CompetenceCommercialeID");

                    b.HasIndex("TermsAffairesID");

                    b.ToTable("ProfilCommercial");
                });

            modelBuilder.Entity("EtablissementModels.TermsAffaires", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DevisesAcceptees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortLePlusProche")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TermsAffaires");
                });

            modelBuilder.Entity("EtablissementModels.Etablissement", b =>
                {
                    b.HasOne("EtablissementModels.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.AlbumPhotos", "AlbumPhotos")
                        .WithMany()
                        .HasForeignKey("AlbumPhotosID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.Articles", "Articles")
                        .WithMany()
                        .HasForeignKey("ArticlesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.CapaciteDeProduction", "CapaciteDeProduction")
                        .WithMany()
                        .HasForeignKey("CapaciteDeProductionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.PresentationEquipe", "PresentationEquipe")
                        .WithMany()
                        .HasForeignKey("PresentationEquipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.PresentationEtablissement", "PresentationEtablissement")
                        .WithMany()
                        .HasForeignKey("PresentationEtablissementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.PresentationProduction", "PresentationProduction")
                        .WithMany()
                        .HasForeignKey("PresentationProductionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.ProfilCommercial", "ProfilCommercial")
                        .WithMany()
                        .HasForeignKey("ProfilCommercialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("AlbumPhotos");

                    b.Navigation("Articles");

                    b.Navigation("CapaciteDeProduction");

                    b.Navigation("PresentationEquipe");

                    b.Navigation("PresentationEtablissement");

                    b.Navigation("PresentationProduction");

                    b.Navigation("ProfilCommercial");
                });

            modelBuilder.Entity("EtablissementModels.PresentationEtablissement", b =>
                {
                    b.HasOne("EtablissementModels.CategoriesProduitsPrincipaux", "CategoriesProduitsPrincipaux")
                        .WithMany()
                        .HasForeignKey("CategoriesProduitsPrincipauxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriesProduitsPrincipaux");
                });

            modelBuilder.Entity("EtablissementModels.ProfilCommercial", b =>
                {
                    b.HasOne("EtablissementModels.CompetenceCommerciale", "CompetenceCommerciale")
                        .WithMany()
                        .HasForeignKey("CompetenceCommercialeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtablissementModels.TermsAffaires", "TermsAffaires")
                        .WithMany()
                        .HasForeignKey("TermsAffairesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetenceCommerciale");

                    b.Navigation("TermsAffaires");
                });
#pragma warning restore 612, 618
        }
    }
}
